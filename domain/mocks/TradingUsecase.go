// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "tokenize/domain"

	mock "github.com/stretchr/testify/mock"
)

// TradingUsecase is an autogenerated mock type for the TradingUsecase type
type TradingUsecase struct {
	mock.Mock
}

// GetOrderBook provides a mock function with given fields: ctx, symbol
func (_m *TradingUsecase) GetOrderBook(ctx context.Context, symbol string) (*domain.OrderBook, error) {
	ret := _m.Called(ctx, symbol)

	var r0 *domain.OrderBook
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OrderBook); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OrderBook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBookForWss provides a mock function with given fields: ctx, symbol
func (_m *TradingUsecase) GetOrderBookForWss(ctx context.Context, symbol string) (*domain.OrderBook, error) {
	ret := _m.Called(ctx, symbol)

	var r0 *domain.OrderBook
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OrderBook); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OrderBook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTradingUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTradingUsecase creates a new instance of TradingUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTradingUsecase(t mockConstructorTestingTNewTradingUsecase) *TradingUsecase {
	mock := &TradingUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
